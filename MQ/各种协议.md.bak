# 通信协议
互联网时代，TCP/IP协议已经一统江湖，现在的物联网的通信架构也是构建在传统互联网基础架构之上。在当前的互联网通信协议中，HTTP协议由于开发成本低，开放程度高，几乎占据大半江山，所以很多厂商在构建物联网系统时也基于http协议进行开发。包括google主导的physic web项目，都是期望在传统web技术基础上构建物联网协议标准。

　　HTTP协议是典型的CS通讯模式，由客户端主动发起连接，向服务器请求XML或JSON数据。该协议最早是为了适用web浏览器的上网浏览场景和设计的，目前在PC、手机、pad等终端上都应用广泛，但并不适用于物联网场景。在物联网场景中其有三大弊端：

　　1. 由于必须由设备主动向服务器发送数据，难以主动向设备推送数据。对于单单的数据采集等场景还勉强适用，但是对于频繁的操控场景，只能推过设备定期主动拉取的的方式，实现成本和实时性都大打折扣。

　　2. 安全性不高。web的不安全都是妇孺皆知，HTTP是明文协议，在很多要求高安全性的物联网场景，如果不做很多安全准备工作（如采用https等），后果不堪设想。

　　3. 不同于用户交互终端如pc、手机，物联网场景中的设备多样化，对于运算和存储资源都十分受限的设备，http协议实现、XML/JSON数据格式的解析，都是不可能的任务。

### REST/HTTP（松耦合服务调用）
REST （Representational State Transfer），表征状态转换，是基于HTTP协议开发的一种通信风格，目前还不是标准。

　　适用范围：REST/HTTP主要为了简化互联网中的系统架构，快速实现客户端和服务器之间交互的松耦合，降低了客户端和服务器之间的交互延迟。因此适合在物联网的应用层面，通过REST开放物联网中资源，实现服务被其他应用所调用。

　　特点：

　　1. REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是RESTful

　　2.客户端和服务器之间的交互在请求之间是无状态的

　　3. 在服务器端，应用程序状态和功能可以分为各种资源，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI （Universal Resource Identifier） 得到一个惟一的地址。所有资源都共享统一的界面，以便在客户端和服务器之间传输状态

　　4.使用的是标准的 HTTP 方法，比如 GET、PUT、POST 和 DELETE

　　点评： REST/HTTP其实是互联网中服务调用API封装风格，物联网中数据采集到物联网应用系统中，在物联网应用系统中，可以通过开放REST API的方式，把数据服务开放出去，被互联网中其他应用所调用

### CoAP协议

　　CoAP （Constrained Application Protocol），受限应用协议，应用于无线传感网中协议。

　　适用范围：CoAP是简化了HTTP协议的RESTful API，CoAP是6LowPAN协议栈中的应用层协议，它适用于在资源受限的通信的IP网络。 


　　特点：
　　报头压缩：CoAP包含一个紧凑的二进制报头和扩展报头。它只有短短的4B的基本报头，基本报头后面跟扩展选项。一个典型的请求报头为10～20B。

　　方法和URIs：为了实现客户端访问服务器上的资源，CoAP支持GET、PUT、POST和DELETE等方法。CoAP还支持URIs，这是Web架构的主要特点。

　　传输层使用UDP协议：CoAP协议是建立在UDP协议之上，以减少开销和支持组播功能。它也支持一个简单的停止和等待的可靠性传输机制。

　　支持异步通信：HTTP对M2M（Machine-to-Machine）通信不适用，这是由于事务总是由客户端发起。而CoAP协议支持异步通信，这对M2M通信应用来说是常见的休眠／唤醒机制。

　　支持资源发现：为了自主的发现和使用资源，它支持内置的资源发现格式，用于发现设备上的资源列表，或者用于设备向服务目录公告自己的资源。它支持RFC5785中的格式，在CoRE中用／．well―known／core的路径表示资源描述。

　　支持缓存：CoAP协议支持资源描述的缓存以优化其性能。


　　协议主要实现：
　　1. libcoap（C语言实现）
　　2.Californium（java语言实现）

　　点评：CoAP和6LowPan，这分别是应用层协议和网络适配层协议，其目标是解决设备直接连接到IP网络，也就是IP技术应用到设备之间、互联网与设备之间的通信需求。因为IPV6技术带来巨大寻址空间，不光解决了未来巨量设备和资源的标识问题，互联网上应用可以直接访问支持IPV6的设备，而不需要额外的网关。

### MQTT协议（低带宽）
　　MQTT （Message Queuing Telemetry Transport ），消息队列遥测传输，由IBM开发的即时通讯协议，相比来说比较适合物联网场景的通讯协议。MQTT协议采用发布/订阅模式，所有的物联网终端都通过TCP连接到云端，云端通过主题的方式管理各个设备关注的通讯内容，负责将设备与设备之间消息的转发。

　　MQTT在协议设计时就考虑到不同设备的计算性能的差异，所以所有的协议都是采用二进制格式编解码，并且编解码格式都非常易于开发和实现。最小的数据包只有2个字节，对于低功耗低速网络也有很好的适应性。有非常完善的QOS机制，根据业务场景可以选择最多一次、至少一次、刚好一次三种消息送达模式。运行在TCP协议之上，同时支持TLS（TCP+SSL）协议，并且由于所有数据通信都经过云端，安全性得到了较好地保障。

　　适用范围：在低带宽、不可靠的网络下提供基于云平台的远程设备的数据传输和监控。

　　特点：
　　1.使用基于代理的发布/订阅消息模式，提供一对多的消息发布
　　2.使用 TCP/IP 提供网络连接
　　3.小型传输，开销很小（固定长度的头部是 2 字节），协议交换最小化，以降低网络流量
　　4.支持QoS，有三种消息发布服务质量：“至多一次”， “至少一次”， “只有一次”

　　协议主要实现和应用：
　　1.已经有PHP，JAVA，Python，C，C#等多个语言版本的协议框架
　　2.IBM Bluemix 的一个重要部分是其 IoT Foundation 服务，这是一项基于云的 MQTT 实例
　　3.移动应用程序也早就开始使用MQTT，如 Facebook Messenger 和com等

　　点评：MQTT协议一般适用于设备数据采集到端（Device-》Server，Device-》Gateway），集中星型网络架构（hub-and-spoke），不适用设备与设备之间通信，设备控制能力弱，另外实时性较差，一般都在秒级。

### DDS协议（高可靠性、实时）
　　DDS（Data Distribution Service for Real-Time Systems），面向实时系统的数据分布服务，这是大名鼎鼎的OMG组织提出的协议，其权威性应该能证明该协议的未来应用前景。

　　适用范围：分布式高可靠性、实时传输设备数据通信。目前DDS已经广泛应用于国防、民航、工业控制等领域。

　　特点：
　　1.以数据为中心
　　2.使用无代理的发布/订阅消息模式，点对点、点对多、多对多
　　3.提供多大21种QoS服务质量策略

　　协议主要实现：
　　1.OpenDDS 是一个开源的 C++ 实现
　　2.OpenSplice DDS

　　点评：DDS很好地支持设备之间的数据分发和设备控制，设备和云端的数据传输，同时DDS的数据分发的实时效率非常高，能做到秒级内同时分发百万条消息到众多设备。DDS在服务质量（QoS）上提供非常多的保障途径，这也是它适用于国防军事、工业控制这些高可靠性、可安全性应用领域的原因。但这些应用都工作在有线网络下，在无线网络，特别是资源受限的情况下，没有见到过实施案例。

### AMQP协议（互操作性）
　　AMQP（Advanced Message Queuing Protocol），先进消息队列协议，这是OASIS组织提出的，该组织曾提出OSLC（Open Source Lifecyle）标准，用于业务系统例如PLM，ERP，MES等进行数据交换。

　　适用范围：最早应用于金融系统之间的交易消息传递，在物联网应用中，主要适用于移动手持设备与后台数据中心的通信和分析。

　　特点：
　　1.Wire级的协议，它描述了在网络上传输的数据的格式，以字节为流
　　2.面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全

　　协议实现：
　　1.Erlang中的实现有 RabbitMQ
　　2.AMQP的开源实现，用C语言编写OpenAMQ
　　3.Apache Qpid
　　4.stormMQ

### XMPP协议（即时通信）
　　XMPP（Extensible Messaging and Presence Protocol）可扩展通讯和表示协议，XMPP的前身是Jabber，一个开源形式组织产生的网络即时通信协议。XMPP目前被IETF国际标准组织完成了标准化工作。

　　适用范围：即时通信的应用程序，还能用在网络管理、内容供稿、协同工具、档案共享、游戏、远端系统监控等。

　　特点：
　　1.客户机/服务器通信模式
　　2.分布式网络
　　3.简单的客户端，将大多数工作放在服务器端进行
　　4.标准通用标记语言的子集XML的数据格式

　　点评：XMPP是基于XML的协议，由于其开放性和易用性，在互联网及时通讯应用中运用广泛。相对HTTP，XMPP在通讯的业务流程上是更适合物联网系统的，开发者不用花太多心思去解决设备通讯时的业务通讯流程，相对开发成本会更低。但是HTTP协议中的安全性以及计算资源消耗的硬伤并没有得到本质的解决。

### JMS （Java Message Service）
　　JMS （Java Message Service），JAVA消息服务，这是JAVA平台中著名的消息队列协议。

　　Java消息服务（Java Message Service）应用程序接口，是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。

　　JMS是一种与厂商无关的 API，用来访问消息收发系统消息，它类似于JDBC（Java Database Connectivity）。这里，JDBC 是可以用来访问许多不同关系数据库的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ。 JMS 能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JMS客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。根据有效负载的类型来划分，可以将消息分为几种类型，它们分别携带：简单文本（TextMessage）、可序列化的对象 （ObjectMessage）、属性集合 （MapMessage）、字节流 （BytesMessage）、原始值流 （StreamMessage），还有无有效负载的消息 （Message）。
